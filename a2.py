#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
FTP Analyzer - –≠—Ç–∞–ø 2: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö
–ê–≤—Ç–æ—Ä: –°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö
–í–µ—Ä—Å–∏—è: 2.0
"""

import ftplib
import os
import json
import sys
import csv
import io
from datetime import datetime, timedelta
from pathlib import Path
import pandas as pd

class FTPAnalyzer:
    def __init__(self):
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ FTP-—Å–µ—Ä–≤–µ—Ä–∞
        self.ftp_host = "smkft.space"
        self.ftp_port = 2122
        self.ftp_user = "nielsen"
        self.ftp_pass = "Qazwsx32123"
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–æ—Ä–æ–¥–æ–≤
        self.cities = {
            'khar': '–•–∞—Ä—å–∫–æ–≤',
            'kiev': '–ö–∏–µ–≤', 
            'dnepr': '–î–Ω–µ–ø—Ä',
            'bel': '–ë–µ–ª–∞—è –¶–µ—Ä–∫–æ–≤—å'
        }
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –ø–∞–ø–æ–∫
        self.base_dir = Path("ftp_data")
        self.cache_dir = self.base_dir / "cache"
        self.reports_dir = self.base_dir / "reports"
        self.structure_file = self.base_dir / "ftp_structure.json"
        
        # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–ø–∫–∏
        self.create_directories()
        
    def create_directories(self):
        """–°–æ–∑–¥–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–ø–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
        try:
            self.base_dir.mkdir(exist_ok=True)
            self.cache_dir.mkdir(exist_ok=True)
            self.reports_dir.mkdir(exist_ok=True)
            print(f"‚úì –°–æ–∑–¥–∞–Ω–∞ —Ä–∞–±–æ—á–∞—è –ø–∞–ø–∫–∞: {self.base_dir.absolute()}")
            print(f"‚úì –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ –∫–µ—à–∞: {self.cache_dir.absolute()}")
            print(f"‚úì –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ –æ—Ç—á–µ—Ç–æ–≤: {self.reports_dir.absolute()}")
        except Exception as e:
            print(f"‚úó –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–æ–∫: {e}")
            sys.exit(1)
            
    def clear_cache(self):
        """–û—á–∏—â–∞–µ—Ç –∫–µ—à"""
        try:
            import shutil
            if self.cache_dir.exists():
                shutil.rmtree(self.cache_dir)
                self.cache_dir.mkdir()
                print("‚úì –ö–µ—à –æ—á–∏—â–µ–Ω")
                return True
        except Exception as e:
            print(f"‚úó –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–µ—à–∞: {e}")
            return False
            
    def ask_clear_cache(self):
        """–°–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ—á–∏—Å—Ç–∫–µ –∫–µ—à–∞"""
        while True:
            choice = input("\nüóëÔ∏è  –û—á–∏—Å—Ç–∏—Ç—å –∫–µ—à –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π? (y/n): ").lower().strip()
            if choice in ['y', 'yes', '–¥', '–¥–∞']:
                return self.clear_cache()
            elif choice in ['n', 'no', '–Ω', '–Ω–µ—Ç']:
                print("‚ÑπÔ∏è  –ö–µ—à —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
                return True
            else:
                print("‚ùå –í–≤–µ–¥–∏—Ç–µ 'y' –¥–ª—è –¥–∞ –∏–ª–∏ 'n' –¥–ª—è –Ω–µ—Ç")
                
    def connect_ftp(self):
        """–ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ FTP-—Å–µ—Ä–≤–µ—Ä—É"""
        try:
            print(f"üîÑ –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ FTP-—Å–µ—Ä–≤–µ—Ä—É {self.ftp_host}:{self.ftp_port}...")
            ftp = ftplib.FTP()
            ftp.connect(self.ftp_host, self.ftp_port)
            ftp.login(self.ftp_user, self.ftp_pass)
            print("‚úì –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ FTP —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            return ftp
        except ftplib.error_perm as e:
            print(f"‚úó –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ FTP: {e}")
            return None
        except Exception as e:
            print(f"‚úó –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ FTP: {e}")
            return None
            
    def download_file(self, ftp, remote_path, local_path):
        """–°–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–∞–π–ª —Å FTP —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–∞–π–ª –≤ –∫–µ—à–µ
            if local_path.exists():
                print(f"üìÑ –§–∞–π–ª –Ω–∞–π–¥–µ–Ω –≤ –∫–µ—à–µ: {local_path.name}")
                return True
                
            print(f"‚¨áÔ∏è  –°–∫–∞—á–∏–≤–∞–µ–º: {remote_path}")
            local_path.parent.mkdir(parents=True, exist_ok=True)
            
            with open(local_path, 'wb') as f:
                ftp.retrbinary(f'RETR {remote_path}', f.write)
            
            print(f"‚úì –°–∫–∞—á–∞–Ω: {local_path.name}")
            return True
            
        except ftplib.error_perm as e:
            if "550" in str(e):  # –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
                print(f"‚ö†Ô∏è  –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {remote_path}")
            else:
                print(f"‚úó –û—à–∏–±–∫–∞ FTP –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ {remote_path}: {e}")
            return False
        except Exception as e:
            print(f"‚úó –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è {remote_path}: {e}")
            return False
            
    def read_csv_with_pipe(self, file_path):
        """–ß–∏—Ç–∞–µ—Ç CSV —Ñ–∞–π–ª —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º |"""
        try:
            df = pd.read_csv(file_path, sep='|', encoding='utf-8')
            print(f"‚úì –ü—Ä–æ—á–∏—Ç–∞–Ω CSV: {file_path.name} ({len(df)} —Å—Ç—Ä–æ–∫)")
            return df
        except Exception as e:
            print(f"‚úó –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è CSV {file_path}: {e}")
            return None
            
    def generate_date_range(self, start_date, end_date):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–∞—Ç –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ"""
        dates = []
        current_date = datetime.strptime(start_date, '%Y-%m-%d')
        end_date_obj = datetime.strptime(end_date, '%Y-%m-%d')
        
        while current_date <= end_date_obj:
            dates.append(current_date.strftime('%Y-%m-%d'))
            current_date += timedelta(days=1)
            
        return dates
        
    def download_shop_files(self, ftp):
        """–°–∫–∞—á–∏–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏ –º–∞–≥–∞–∑–∏–Ω–æ–≤"""
        print("\nüìã –ó–ê–ì–†–£–ó–ö–ê –°–ü–†–ê–í–û–ß–ù–ò–ö–û–í –ú–ê–ì–ê–ó–ò–ù–û–í")
        print("-" * 40)
        
        shops_data = {}
        
        for city_code, city_name in self.cities.items():
            remote_path = f"/www/shop_{city_code}.csv"
            local_path = self.cache_dir / f"shop_{city_code}.csv"
            
            if self.download_file(ftp, remote_path, local_path):
                df = self.read_csv_with_pipe(local_path)
                if df is not None:
                    shops_data[city_code] = df
                    print(f"  üìä {city_name}: {len(df)} –º–∞–≥–∞–∑–∏–Ω–æ–≤")
                    
        return shops_data
        
    def download_receipt_files(self, ftp, start_date, end_date):
        """–°–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–∞–π–ª—ã —á–µ–∫–æ–≤ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥"""
        print(f"\nüßæ –ó–ê–ì–†–£–ó–ö–ê –§–ê–ô–õ–û–í –ß–ï–ö–û–í ({start_date} - {end_date})")
        print("-" * 50)
        
        dates = self.generate_date_range(start_date, end_date)
        receipts_data = {}
        
        for city_code, city_name in self.cities.items():
            print(f"\nüèôÔ∏è  {city_name} ({city_code}):")
            receipts_data[city_code] = []
            
            for date in dates:
                remote_path = f"/www/receipt/receipt_{city_code}_{date}.csv"
                local_path = self.cache_dir / f"receipt_{city_code}_{date}.csv"
                
                if self.download_file(ftp, remote_path, local_path):
                    df = self.read_csv_with_pipe(local_path)
                    if df is not None:
                        df['date'] = date
                        receipts_data[city_code].append(df)
                        print(f"    üìÖ {date}: {len(df)} —á–µ–∫–æ–≤")
                        
        return receipts_data
        
    def consolidate_data(self, shops_data, receipts_data):
        """–ö–æ–Ω—Å–æ–ª–∏–¥–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏ —Å–æ–∑–¥–∞–µ—Ç –æ—Ç—á–µ—Ç"""
        print("\nüìä –ö–û–ù–°–û–õ–ò–î–ê–¶–ò–Ø –î–ê–ù–ù–´–•")
        print("-" * 30)
        
        report_data = []
        
        for city_code, city_name in self.cities.items():
            print(f"\nüèôÔ∏è  –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {city_name}...")
            
            if city_code not in shops_data:
                print(f"  ‚ö†Ô∏è  –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –º–∞–≥–∞–∑–∏–Ω–∞—Ö –¥–ª—è {city_name}")
                continue
                
            shops_df = shops_data[city_code]
            
            if city_code not in receipts_data or not receipts_data[city_code]:
                print(f"  ‚ö†Ô∏è  –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —á–µ–∫–∞—Ö –¥–ª—è {city_name}")
                # –î–æ–±–∞–≤–ª—è–µ–º –º–∞–≥–∞–∑–∏–Ω—ã —Å –Ω—É–ª–µ–≤—ã–º–∏ —á–µ–∫–∞–º–∏
                for _, shop in shops_df.iterrows():
                    report_data.append({
                        '–ì–æ—Ä–æ–¥': city_name,
                        'ID_–º–∞–≥–∞–∑–∏–Ω–∞': shop['id'],
                        '–ù–∞–∑–≤–∞–Ω–∏–µ_–º–∞–≥–∞–∑–∏–Ω–∞': shop['name'],
                        '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ_—á–µ–∫–æ–≤': 0
                    })
                continue
                
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —á–µ–∫–∏ –ø–æ –≥–æ—Ä–æ–¥—É
            all_receipts = pd.concat(receipts_data[city_code], ignore_index=True)
            
            # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–∫–æ–≤ –ø–æ –∫–∞–∂–¥–æ–º—É –º–∞–≥–∞–∑–∏–Ω—É
            receipt_counts = all_receipts.groupby('shop_id').size().reset_index(name='count')
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –º–∞–≥–∞–∑–∏–Ω–∞—Ö
            merged = shops_df.merge(receipt_counts, left_on='id', right_on='shop_id', how='left')
            merged['count'] = merged['count'].fillna(0).astype(int)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
            for _, row in merged.iterrows():
                report_data.append({
                    '–ì–æ—Ä–æ–¥': city_name,
                    'ID_–º–∞–≥–∞–∑–∏–Ω–∞': row['id'],
                    '–ù–∞–∑–≤–∞–Ω–∏–µ_–º–∞–≥–∞–∑–∏–Ω–∞': row['name'],
                    '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ_—á–µ–∫–æ–≤': row['count']
                })
                
            total_receipts = len(all_receipts)
            total_shops = len(shops_df)
            print(f"  ‚úì –ú–∞–≥–∞–∑–∏–Ω–æ–≤: {total_shops}, –ß–µ–∫–æ–≤: {total_receipts}")
            
        return report_data
        
    def save_report(self, report_data, start_date, end_date):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç—á–µ—Ç –≤ CSV –∏ Excel"""
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        
        # –°–æ–∑–¥–∞–µ–º DataFrame
        df = pd.DataFrame(report_data)
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≥–æ—Ä–æ–¥—É –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —á–µ–∫–æ–≤
        df = df.sort_values(['–ì–æ—Ä–æ–¥', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ_—á–µ–∫–æ–≤'], ascending=[True, False])
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ CSV —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º |
        csv_file = self.reports_dir / f"report_{start_date}_{end_date}_{timestamp}.csv"
        df.to_csv(csv_file, sep='|', index=False, encoding='utf-8')
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Excel
        excel_file = self.reports_dir / f"report_{start_date}_{end_date}_{timestamp}.xlsx"
        df.to_excel(excel_file, index=False, engine='openpyxl')
        
        print(f"\nüìÑ –û–¢–ß–ï–¢ –°–û–•–†–ê–ù–ï–ù:")
        print(f"  CSV: {csv_file.absolute()}")
        print(f"  Excel: {excel_file.absolute()}")
        
        return df
        
    def print_report_summary(self, df):
        """–í—ã–≤–æ–¥–∏—Ç –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É –æ—Ç—á–µ—Ç–∞"""
        print(f"\nüìà –°–í–û–î–ö–ê –û–¢–ß–ï–¢–ê:")
        print("-" * 40)
        
        total_shops = len(df)
        total_receipts = df['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ_—á–µ–∫–æ–≤'].sum()
        
        print(f"üìä –í—Å–µ–≥–æ –º–∞–≥–∞–∑–∏–Ω–æ–≤: {total_shops}")
        print(f"üßæ –í—Å–µ–≥–æ —á–µ–∫–æ–≤: {total_receipts}")
        print(f"üìÖ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫ –Ω–∞ –º–∞–≥–∞–∑–∏–Ω: {total_receipts/total_shops:.1f}")
        
        print(f"\nüèÜ –¢–û–ü-5 –ú–ê–ì–ê–ó–ò–ù–û–í –ü–û –ß–ï–ö–ê–ú:")
        top5 = df.nlargest(5, '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ_—á–µ–∫–æ–≤')
        for i, (_, row) in enumerate(top5.iterrows(), 1):
            print(f"  {i}. {row['–ù–∞–∑–≤–∞–Ω–∏–µ_–º–∞–≥–∞–∑–∏–Ω–∞']} ({row['–ì–æ—Ä–æ–¥']}) - {row['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ_—á–µ–∫–æ–≤']} —á–µ–∫–æ–≤")
            
        print(f"\nüèôÔ∏è  –ü–û –ì–û–†–û–î–ê–ú:")
        city_summary = df.groupby('–ì–æ—Ä–æ–¥').agg({
            '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ_—á–µ–∫–æ–≤': ['count', 'sum']
        }).round(1)
        
        for city in city_summary.index:
            shops_count = city_summary.loc[city, ('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ_—á–µ–∫–æ–≤', 'count')]
            receipts_count = city_summary.loc[city, ('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ_—á–µ–∫–æ–≤', 'sum')]
            print(f"  {city}: {shops_count} –º–∞–≥–∞–∑–∏–Ω–æ–≤, {receipts_count} —á–µ–∫–æ–≤")
            
    def run_report_generation(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç—á–µ—Ç–∞"""
        print("=" * 60)
        print("üöÄ –≠–¢–ê–ü 2: –ì–ï–ù–ï–†–ê–¶–ò–Ø –û–¢–ß–ï–¢–ê")
        print("=" * 60)
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ç—á–µ—Ç–∞
        start_date = "2025-06-10"
        end_date = "2025-06-17"
        
        print(f"üìÖ –ü–µ—Ä–∏–æ–¥: {start_date} - {end_date}")
        print(f"üèôÔ∏è  –ì–æ—Ä–æ–¥–∞: {', '.join(self.cities.values())}")
        
        # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–± –æ—á–∏—Å—Ç–∫–µ –∫–µ—à–∞
        if not self.ask_clear_cache():
            return False
            
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ FTP
        ftp = self.connect_ftp()
        if not ftp:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ FTP-—Å–µ—Ä–≤–µ—Ä—É")
            return False
            
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏ –º–∞–≥–∞–∑–∏–Ω–æ–≤
            shops_data = self.download_shop_files(ftp)
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª—ã —á–µ–∫–æ–≤
            receipts_data = self.download_receipt_files(ftp, start_date, end_date)
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            ftp.quit()
            print("\n‚úì –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å FTP –∑–∞–∫—Ä—ã—Ç–æ")
            
            # –ö–æ–Ω—Å–æ–ª–∏–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            report_data = self.consolidate_data(shops_data, receipts_data)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
            df = self.save_report(report_data, start_date, end_date)
            
            # –í—ã–≤–æ–¥–∏–º —Å–≤–æ–¥–∫—É
            self.print_report_summary(df)
            
            print(f"\n‚úÖ –≠–¢–ê–ü 2 –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!")
            print(f"üìÅ –ü–∞–ø–∫–∞ –æ—Ç—á–µ—Ç–æ–≤: {self.reports_dir.absolute()}")
            print("\nüí° –î–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É –Ω–∞–ø–∏—à–∏—Ç–µ '–û–ö'")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")
            try:
                ftp.quit()
            except:
                pass
            return False
            
    def scan_directory(self, ftp, path="/"):
        """–°–∫–∞–Ω–∏—Ä—É–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –Ω–∞ FTP-—Å–µ—Ä–≤–µ—Ä–µ"""
        items = []
        try:
            print(f"üîç –°–∫–∞–Ω–∏—Ä—É–µ–º –ø–∞–ø–∫—É: {path}")
            
            ftp_items = []
            ftp.retrlines('LIST ' + path, ftp_items.append)
            
            for item in ftp_items:
                parts = item.split()
                if len(parts) >= 9:
                    permissions = parts[0]
                    name = ' '.join(parts[8:])
                    
                    if name in ['.', '..']:
                        continue
                        
                    is_directory = permissions.startswith('d')
                    
                    item_info = {
                        'name': name,
                        'path': f"{path.rstrip('/')}/{name}",
                        'type': 'directory' if is_directory else 'file',
                        'size': parts[4] if not is_directory else 0,
                        'permissions': permissions,
                        'modified': ' '.join(parts[5:8])
                    }
                    
                    items.append(item_info)
                    
            print(f"  üìÅ –ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {len(items)}")
            return items
            
        except Exception as e:
            print(f"‚úó –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞–ø–∫–∏ {path}: {e}")
            return []
            
    def scan_ftp_structure(self, ftp, start_path="/www", max_depth=3, current_depth=0):
        """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ —Å–∫–∞–Ω–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É FTP –Ω–∞—á–∏–Ω–∞—è —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–∞–ø–∫–∏"""
        structure = {
            'path': start_path,
            'type': 'directory',
            'children': [],
            'scanned_at': datetime.now().isoformat()
        }
        
        if current_depth >= max_depth:
            print(f"‚ö†Ô∏è  –î–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≥–ª—É–±–∏–Ω–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è ({max_depth}) –¥–ª—è {start_path}")
            return structure
            
        items = self.scan_directory(ftp, start_path)
        
        for item in items:
            if item['type'] == 'file' and item['name'].lower().endswith('.csv'):
                structure['children'].append({
                    'name': item['name'],
                    'path': item['path'],
                    'type': 'file',
                    'size': item['size'],
                    'format': 'csv'
                })
                print(f"  üìÑ CSV —Ñ–∞–π–ª: {item['name']} ({item['size']} –±–∞–π—Ç)")
                
            elif item['type'] == 'directory':
                print(f"  üìÅ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –ø–∞–ø–∫—É: {item['name']}")
                subdirectory = self.scan_ftp_structure(
                    ftp, 
                    item['path'], 
                    max_depth, 
                    current_depth + 1
                )
                structure['children'].append(subdirectory)
                
        return structure
        
    def save_structure(self, structure):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É FTP –≤ JSON —Ñ–∞–π–ª"""
        try:
            with open(self.structure_file, 'w', encoding='utf-8') as f:
                json.dump(structure, f, ensure_ascii=False, indent=2)
            print(f"‚úì –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Ñ–∞–π–ª: {self.structure_file.absolute()}")
            return True
        except Exception as e:
            print(f"‚úó –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: {e}")
            return False
            
    def print_structure_summary(self, structure, level=0):
        """–í—ã–≤–æ–¥–∏—Ç –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É —Å—Ç—Ä—É–∫—Ç—É—Ä—ã"""
        indent = "  " * level
        
        if structure['type'] == 'directory':
            print(f"{indent}üìÅ {structure['path']}")
            csv_files = [child for child in structure.get('children', []) if child.get('format') == 'csv']
            directories = [child for child in structure.get('children', []) if child['type'] == 'directory']
            
            if csv_files:
                print(f"{indent}  üìÑ CSV —Ñ–∞–π–ª–æ–≤: {len(csv_files)}")
                
            for child in structure.get('children', []):
                if child['type'] == 'directory':
                    self.print_structure_summary(child, level + 1)
                    
    def run_structure_scan(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã FTP"""
        print("=" * 60)
        print("üöÄ –≠–¢–ê–ü 1: –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–ï –°–¢–†–£–ö–¢–£–†–´ FTP-–°–ï–†–í–ï–†–ê")
        print("=" * 60)
        
        ftp = self.connect_ftp()
        if not ftp:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ FTP-—Å–µ—Ä–≤–µ—Ä—É")
            return False
            
        try:
            print("\nüîç –ù–∞—á–∏–Ω–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã...")
            structure = self.scan_ftp_structure(ftp, "/www", max_depth=3)
            
            ftp.quit()
            print("‚úì –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å FTP –∑–∞–∫—Ä—ã—Ç–æ")
            
            if self.save_structure(structure):
                print("\nüìã –ö–†–ê–¢–ö–ê–Ø –°–í–û–î–ö–ê –°–¢–†–£–ö–¢–£–†–´:")
                print("-" * 40)
                self.print_structure_summary(structure)
                
                print(f"\n‚úÖ –≠–¢–ê–ü 1 –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!")
                print(f"üìÅ –†–∞–±–æ—á–∞—è –ø–∞–ø–∫–∞: {self.base_dir.absolute()}")
                print(f"üìÑ –§–∞–π–ª —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: {self.structure_file.absolute()}")
                return True
            else:
                print("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            try:
                ftp.quit()
            except:
                pass
            return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
    print("FTP Analyzer v2.0 - –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–∞–Ω–Ω—ã—Ö FTP-—Å–µ—Ä–≤–µ—Ä–∞")
    print("–ê–≤—Ç–æ—Ä: –°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö\n")
    
    try:
        analyzer = FTPAnalyzer()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
        try:
            import pandas as pd
            import openpyxl
        except ImportError as e:
            print("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏!")
            print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏—Ö –∫–æ–º–∞–Ω–¥–∞–º–∏:")
            print("pip install pandas openpyxl")
            input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...")
            return
        
        print("üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
        print("1. –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É FTP (–≠—Ç–∞–ø 1)")
        print("2. –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç (–≠—Ç–∞–ø 2)")
        
        while True:
            choice = input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1 –∏–ª–∏ 2): ").strip()
            if choice == "1":
                success = analyzer.run_structure_scan()
                break
            elif choice == "2":
                success = analyzer.run_report_generation()
                break
            else:
                print("‚ùå –í–≤–µ–¥–∏—Ç–µ '1' –∏–ª–∏ '2'")
                
        if success:
            input("\n‚è∏Ô∏è  –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...")
        else:
            input("\n‚ùå –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏. –ù–∞–∂–º–∏—Ç–µ Enter...")
            
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è  –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...")

if __name__ == "__main__":
    main()