#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
FTP Analyzer - –≠—Ç–∞–ø 3: –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –æ—Ç—á–µ—Ç —Å –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º–∏ –ø—Ä–æ–¥–∞–∂
–ê–≤—Ç–æ—Ä: –°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö
–í–µ—Ä—Å–∏—è: 3.0
"""

import ftplib
import os
import json
import sys
import csv
import io
from datetime import datetime, timedelta
from pathlib import Path
import pandas as pd

class FTPAnalyzer:
    def __init__(self):
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ FTP-—Å–µ—Ä–≤–µ—Ä–∞
        self.ftp_host = "smkft.space"
        self.ftp_port = 2122
        self.ftp_user = "nielsen"
        self.ftp_pass = "Qazwsx32123"
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–æ—Ä–æ–¥–æ–≤
        self.cities = {
            'khar': '–•–∞—Ä—å–∫–æ–≤',
            'kiev': '–ö–∏–µ–≤', 
            'dnepr': '–î–Ω–µ–ø—Ä',
            'bel': '–ë–µ–ª–∞—è –¶–µ—Ä–∫–æ–≤—å'
        }
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –ø–∞–ø–æ–∫
        self.base_dir = Path("ftp_data")
        self.cache_dir = self.base_dir / "cache"
        self.reports_dir = self.base_dir / "reports"
        self.structure_file = self.base_dir / "ftp_structure.json"
        
        # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–ø–∫–∏
        self.create_directories()
        
    def create_directories(self):
        """–°–æ–∑–¥–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–ø–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
        try:
            self.base_dir.mkdir(exist_ok=True)
            self.cache_dir.mkdir(exist_ok=True)
            self.reports_dir.mkdir(exist_ok=True)
            print(f"‚úì –°–æ–∑–¥–∞–Ω–∞ —Ä–∞–±–æ—á–∞—è –ø–∞–ø–∫–∞: {self.base_dir.absolute()}")
            print(f"‚úì –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ –∫–µ—à–∞: {self.cache_dir.absolute()}")
            print(f"‚úì –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ –æ—Ç—á–µ—Ç–æ–≤: {self.reports_dir.absolute()}")
        except Exception as e:
            print(f"‚úó –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–æ–∫: {e}")
            sys.exit(1)
            
    def clear_cache(self):
        """–û—á–∏—â–∞–µ—Ç –∫–µ—à"""
        try:
            import shutil
            if self.cache_dir.exists():
                shutil.rmtree(self.cache_dir)
                self.cache_dir.mkdir()
                print("‚úì –ö–µ—à –æ—á–∏—â–µ–Ω")
                return True
        except Exception as e:
            print(f"‚úó –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–µ—à–∞: {e}")
            return False
            
    def ask_clear_cache(self):
        """–°–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ—á–∏—Å—Ç–∫–µ –∫–µ—à–∞"""
        while True:
            choice = input("\nüóëÔ∏è  –û—á–∏—Å—Ç–∏—Ç—å –∫–µ—à –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π? (y/n): ").lower().strip()
            if choice in ['y', 'yes', '–¥', '–¥–∞']:
                return self.clear_cache()
            elif choice in ['n', 'no', '–Ω', '–Ω–µ—Ç']:
                print("‚ÑπÔ∏è  –ö–µ—à —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
                return True
            else:
                print("‚ùå –í–≤–µ–¥–∏—Ç–µ 'y' –¥–ª—è –¥–∞ –∏–ª–∏ 'n' –¥–ª—è –Ω–µ—Ç")
                
    def connect_ftp(self):
        """–ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ FTP-—Å–µ—Ä–≤–µ—Ä—É"""
        try:
            print(f"üîÑ –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ FTP-—Å–µ—Ä–≤–µ—Ä—É {self.ftp_host}:{self.ftp_port}...")
            ftp = ftplib.FTP()
            ftp.connect(self.ftp_host, self.ftp_port)
            ftp.login(self.ftp_user, self.ftp_pass)
            print("‚úì –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ FTP —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            return ftp
        except ftplib.error_perm as e:
            print(f"‚úó –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ FTP: {e}")
            return None
        except Exception as e:
            print(f"‚úó –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ FTP: {e}")
            return None
            
    def download_file(self, ftp, remote_path, local_path):
        """–°–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–∞–π–ª —Å FTP —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–∞–π–ª –≤ –∫–µ—à–µ
            if local_path.exists():
                print(f"üìÑ –§–∞–π–ª –Ω–∞–π–¥–µ–Ω –≤ –∫–µ—à–µ: {local_path.name}")
                return True
                
            print(f"‚¨áÔ∏è  –°–∫–∞—á–∏–≤–∞–µ–º: {remote_path}")
            local_path.parent.mkdir(parents=True, exist_ok=True)
            
            with open(local_path, 'wb') as f:
                ftp.retrbinary(f'RETR {remote_path}', f.write)
            
            print(f"‚úì –°–∫–∞—á–∞–Ω: {local_path.name}")
            return True
            
        except ftplib.error_perm as e:
            if "550" in str(e):  # –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
                print(f"‚ö†Ô∏è  –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {remote_path}")
            else:
                print(f"‚úó –û—à–∏–±–∫–∞ FTP –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ {remote_path}: {e}")
            return False
        except Exception as e:
            print(f"‚úó –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è {remote_path}: {e}")
            return False
            
    def read_csv_with_pipe(self, file_path):
        """–ß–∏—Ç–∞–µ—Ç CSV —Ñ–∞–π–ª —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º |"""
        try:
            df = pd.read_csv(file_path, sep='|', encoding='utf-8')
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —á–∏—Å–ª–æ–≤—ã–µ –ø–æ–ª—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ç–∏–ø—ã
            file_name = file_path.name.lower()
            
            if 'cartitem' in file_name:
                # –î–ª—è —Ñ–∞–π–ª–æ–≤ cartitem –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º qty –∏ total_price –≤ —á–∏—Å–ª–∞
                if 'qty' in df.columns:
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–∏—Å–ª–∞ —Å –∑–∞–ø—è—Ç–æ–π –∫–∞–∫ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º –¥–µ—Å—è—Ç–∏—á–Ω—ã—Ö
                    df['qty'] = df['qty'].astype(str).str.replace(',', '.', regex=False)
                    df['qty'] = pd.to_numeric(df['qty'], errors='coerce').fillna(0)
                if 'total_price' in df.columns:
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–∏—Å–ª–∞ —Å –∑–∞–ø—è—Ç–æ–π –∫–∞–∫ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º –¥–µ—Å—è—Ç–∏—á–Ω—ã—Ö
                    df['total_price'] = df['total_price'].astype(str).str.replace(',', '.', regex=False)
                    df['total_price'] = pd.to_numeric(df['total_price'], errors='coerce').fillna(0.0)
            
            # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –∏–∑ —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö –ø–æ–ª–µ–π
            for col in df.columns:
                if df[col].dtype == 'object':
                    df[col] = df[col].astype(str).str.strip()
            
            print(f"‚úì –ü—Ä–æ—á–∏—Ç–∞–Ω CSV: {file_path.name} ({len(df)} —Å—Ç—Ä–æ–∫)")
            return df
        except Exception as e:
            print(f"‚úó –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è CSV {file_path}: {e}")
            return None
            
    def generate_date_range(self, start_date, end_date):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–∞—Ç –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ"""
        dates = []
        current_date = datetime.strptime(start_date, '%Y-%m-%d')
        end_date_obj = datetime.strptime(end_date, '%Y-%m-%d')
        
        while current_date <= end_date_obj:
            dates.append(current_date.strftime('%Y-%m-%d'))
            current_date += timedelta(days=1)
            
        return dates
        
    def download_shop_files(self, ftp):
        """–°–∫–∞—á–∏–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏ –º–∞–≥–∞–∑–∏–Ω–æ–≤"""
        print("\nüìã –ó–ê–ì–†–£–ó–ö–ê –°–ü–†–ê–í–û–ß–ù–ò–ö–û–í –ú–ê–ì–ê–ó–ò–ù–û–í")
        print("-" * 40)
        
        shops_data = {}
        
        for city_code, city_name in self.cities.items():
            remote_path = f"/www/shop_{city_code}.csv"
            local_path = self.cache_dir / f"shop_{city_code}.csv"
            
            if self.download_file(ftp, remote_path, local_path):
                df = self.read_csv_with_pipe(local_path)
                if df is not None:
                    shops_data[city_code] = df
                    print(f"  üìä {city_name}: {len(df)} –º–∞–≥–∞–∑–∏–Ω–æ–≤")
                    
        return shops_data
        
    def download_receipt_files(self, ftp, start_date, end_date):
        """–°–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–∞–π–ª—ã —á–µ–∫–æ–≤ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥"""
        print(f"\nüßæ –ó–ê–ì–†–£–ó–ö–ê –§–ê–ô–õ–û–í –ß–ï–ö–û–í ({start_date} - {end_date})")
        print("-" * 50)
        
        dates = self.generate_date_range(start_date, end_date)
        receipts_data = {}
        
        for city_code, city_name in self.cities.items():
            print(f"\nüèôÔ∏è  {city_name} ({city_code}):")
            receipts_data[city_code] = []
            
            for date in dates:
                remote_path = f"/www/receipt/receipt_{city_code}_{date}.csv"
                local_path = self.cache_dir / f"receipt_{city_code}_{date}.csv"
                
                if self.download_file(ftp, remote_path, local_path):
                    df = self.read_csv_with_pipe(local_path)
                    if df is not None:
                        df['date'] = date
                        receipts_data[city_code].append(df)
                        print(f"    üìÖ {date}: {len(df)} —á–µ–∫–æ–≤")
                        
        return receipts_data
        
    def download_cartitem_files(self, ftp, start_date, end_date):
        """–°–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–∞–π–ª—ã —Ç–æ–≤–∞—Ä–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥"""
        print(f"\nüõí –ó–ê–ì–†–£–ó–ö–ê –§–ê–ô–õ–û–í –¢–û–í–ê–†–ù–´–• –ü–û–ó–ò–¶–ò–ô ({start_date} - {end_date})")
        print("-" * 60)
        
        dates = self.generate_date_range(start_date, end_date)
        cartitems_data = {}
        
        for city_code, city_name in self.cities.items():
            print(f"\nüèôÔ∏è  {city_name} ({city_code}):")
            cartitems_data[city_code] = []
            
            for date in dates:
                remote_path = f"/www/cartitem/cartitem_{city_code}_{date}.csv"
                local_path = self.cache_dir / f"cartitem_{city_code}_{date}.csv"
                
                if self.download_file(ftp, remote_path, local_path):
                    df = self.read_csv_with_pipe(local_path)
                    if df is not None:
                        df['date'] = date
                        cartitems_data[city_code].append(df)
                        total_qty = df['qty'].sum() if 'qty' in df.columns else 0
                        total_price = df['total_price'].sum() if 'total_price' in df.columns else 0
                        print(f"    üìÖ {date}: {len(df)} –ø–æ–∑–∏—Ü–∏–π, —Ç–æ–≤–∞—Ä–æ–≤: {float(total_qty):.1f}, –æ–±–æ—Ä–æ—Ç: {float(total_price):.2f}")
                        
        return cartitems_data
        
    def consolidate_data_with_sales(self, shops_data, receipts_data, cartitems_data):
        """–ö–æ–Ω—Å–æ–ª–∏–¥–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º–∏ –ø—Ä–æ–¥–∞–∂ –∏ —Å–æ–∑–¥–∞–µ—Ç –æ—Ç—á–µ—Ç"""
        print("\nüìä –ö–û–ù–°–û–õ–ò–î–ê–¶–ò–Ø –î–ê–ù–ù–´–• –° –ü–û–ö–ê–ó–ê–¢–ï–õ–Ø–ú–ò –ü–†–û–î–ê–ñ")
        print("-" * 50)
        
        report_data = []
        
        for city_code, city_name in self.cities.items():
            print(f"\nüèôÔ∏è  –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {city_name}...")
            
            if city_code not in shops_data:
                print(f"  ‚ö†Ô∏è  –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –º–∞–≥–∞–∑–∏–Ω–∞—Ö –¥–ª—è {city_name}")
                continue
                
            shops_df = shops_data[city_code]
            
            if city_code not in receipts_data or not receipts_data[city_code]:
                print(f"  ‚ö†Ô∏è  –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —á–µ–∫–∞—Ö –¥–ª—è {city_name}")
                # –î–æ–±–∞–≤–ª—è–µ–º –º–∞–≥–∞–∑–∏–Ω—ã —Å –Ω—É–ª–µ–≤—ã–º–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º–∏
                for _, shop in shops_df.iterrows():
                    report_data.append({
                        '–ì–æ—Ä–æ–¥': city_name,
                        'ID_–º–∞–≥–∞–∑–∏–Ω–∞': shop['id'],
                        '–ù–∞–∑–≤–∞–Ω–∏–µ_–º–∞–≥–∞–∑–∏–Ω–∞': shop['name'],
                        '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ_—á–µ–∫–æ–≤': 0,
                        '–û–±–æ—Ä–æ—Ç': 0.0,
                        '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ_—Ç–æ–≤–∞—Ä–æ–≤': 0.0
                    })
                continue
                
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —á–µ–∫–∏ –ø–æ –≥–æ—Ä–æ–¥—É
            all_receipts = pd.concat(receipts_data[city_code], ignore_index=True)
            
            # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–∫–æ–≤ –ø–æ –∫–∞–∂–¥–æ–º—É –º–∞–≥–∞–∑–∏–Ω—É
            receipt_counts = all_receipts.groupby('shop_id').size().reset_index(name='receipt_count')
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
            sales_summary = None
            if city_code in cartitems_data and cartitems_data[city_code]:
                print(f"  üõí –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏...")
                
                # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –ø–æ –≥–æ—Ä–æ–¥—É
                all_cartitems = pd.concat(cartitems_data[city_code], ignore_index=True)
                
                # –°–≤—è–∑—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ —Å —á–µ–∫–∞–º–∏
                cartitems_with_shops = all_cartitems.merge(
                    all_receipts[['id', 'shop_id']], 
                    left_on='receipt_id', 
                    right_on='id', 
                    how='inner'
                )
                
                if not cartitems_with_shops.empty:
                    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –º–∞–≥–∞–∑–∏–Ω–∞–º –∏ —Å—á–∏—Ç–∞–µ–º –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
                    sales_summary = cartitems_with_shops.groupby('shop_id').agg({
                        'total_price': 'sum',
                        'qty': 'sum'
                    }).reset_index()
                    sales_summary.columns = ['shop_id', 'total_revenue', 'total_quantity']
                    
                    # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
                    sales_summary['total_revenue'] = pd.to_numeric(sales_summary['total_revenue'], errors='coerce').fillna(0.0)
                    sales_summary['total_quantity'] = pd.to_numeric(sales_summary['total_quantity'], errors='coerce').fillna(0.0)
                    
                    print(f"    ‚úì –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ç–æ–≤–∞—Ä–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π: {len(all_cartitems)}")
                    print(f"    ‚úì –°–≤—è–∑–∞–Ω–æ —Å —á–µ–∫–∞–º–∏: {len(cartitems_with_shops)}")
                else:
                    print(f"    ‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å —Ç–æ–≤–∞—Ä–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ —Å —á–µ–∫–∞–º–∏")
            else:
                print(f"  ‚ö†Ô∏è  –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ç–æ–≤–∞—Ä–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏—è—Ö –¥–ª—è {city_name}")
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –º–∞–≥–∞–∑–∏–Ω–∞—Ö
            merged = shops_df.merge(receipt_counts, left_on='id', right_on='shop_id', how='left')
            merged['receipt_count'] = merged['receipt_count'].fillna(0).astype(int)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥–∞–∂–∞—Ö
            if sales_summary is not None:
                merged = merged.merge(sales_summary, left_on='id', right_on='shop_id', how='left')
                merged['total_revenue'] = merged['total_revenue'].fillna(0).round(2)
                merged['total_quantity'] = merged['total_quantity'].fillna(0).astype(int)
            else:
                merged['total_revenue'] = 0.0
                merged['total_quantity'] = 0
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
            for _, row in merged.iterrows():
                # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ —á–∏—Å–ª–æ–≤—ã–µ –ø–æ–ª—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
                revenue = float(row['total_revenue']) if pd.notna(row['total_revenue']) else 0.0
                quantity = float(row['total_quantity']) if pd.notna(row['total_quantity']) else 0.0
                
                report_data.append({
                    '–ì–æ—Ä–æ–¥': city_name,
                    'ID_–º–∞–≥–∞–∑–∏–Ω–∞': row['id'],
                    '–ù–∞–∑–≤–∞–Ω–∏–µ_–º–∞–≥–∞–∑–∏–Ω–∞': row['name'],
                    '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ_—á–µ–∫–æ–≤': int(row['receipt_count']),
                    '–û–±–æ—Ä–æ—Ç': revenue,
                    '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ_—Ç–æ–≤–∞—Ä–æ–≤': quantity
                })
                
            total_receipts = len(all_receipts)
            total_shops = len(shops_df)
            total_revenue = float(merged['total_revenue'].sum()) if 'total_revenue' in merged.columns else 0.0
            total_quantity = float(merged['total_quantity'].sum()) if 'total_quantity' in merged.columns else 0.0
            
            print(f"  ‚úì –ú–∞–≥–∞–∑–∏–Ω–æ–≤: {total_shops}")
            print(f"  ‚úì –ß–µ–∫–æ–≤: {total_receipts}")
            print(f"  ‚úì –û–±–æ—Ä–æ—Ç: {total_revenue:,.2f}")
            print(f"  ‚úì –¢–æ–≤–∞—Ä–æ–≤: {total_quantity:,.1f}")
            
        return report_data
        
    def save_excel_report(self, report_data, start_date, end_date):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç—á–µ—Ç —Ç–æ–ª—å–∫–æ –≤ Excel"""
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        
        # –°–æ–∑–¥–∞–µ–º DataFrame
        df = pd.DataFrame(report_data)
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≥–æ—Ä–æ–¥—É –∏ –æ–±–æ—Ä–æ—Ç—É
        df = df.sort_values(['–ì–æ—Ä–æ–¥', '–û–±–æ—Ä–æ—Ç'], ascending=[True, False])
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —á–∏—Å–ª–æ–≤—ã–µ –ø–æ–ª—è
        df['–û–±–æ—Ä–æ—Ç'] = pd.to_numeric(df['–û–±–æ—Ä–æ—Ç'], errors='coerce').fillna(0.0).round(2)
        df['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ_—Ç–æ–≤–∞—Ä–æ–≤'] = pd.to_numeric(df['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ_—Ç–æ–≤–∞—Ä–æ–≤'], errors='coerce').fillna(0.0).round(1)
        df['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ_—á–µ–∫–æ–≤'] = pd.to_numeric(df['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ_—á–µ–∫–æ–≤'], errors='coerce').fillna(0).astype(int)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Excel
        excel_file = self.reports_dir / f"sales_report_{start_date}_{end_date}_{timestamp}.xlsx"
        
        with pd.ExcelWriter(excel_file, engine='openpyxl') as writer:
            df.to_excel(writer, sheet_name='–û—Ç—á–µ—Ç –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º', index=False)
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç —Ä–∞–±–æ—á–µ–≥–æ –ª–∏—Å—Ç–∞ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            worksheet = writer.sheets['–û—Ç—á–µ—Ç –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º']
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–æ–ª–æ–Ω–∫—É –û–±–æ—Ä–æ—Ç –∫–∞–∫ —á–∏—Å–ª–æ —Å 2 –∑–Ω–∞–∫–∞–º–∏ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
            from openpyxl.styles import NamedStyle
            currency_style = NamedStyle(name='currency', number_format='#,##0.00')
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª—å –∫ –∫–æ–ª–æ–Ω–∫–µ –û–±–æ—Ä–æ—Ç (–æ–±—ã—á–Ω–æ –∫–æ–ª–æ–Ω–∫–∞ E, –µ—Å–ª–∏ —Å—á–∏—Ç–∞—Ç—å —Å A)
            for row in range(2, len(df) + 2):  # –ù–∞—á–∏–Ω–∞–µ–º —Å 2 —Å—Ç—Ä–æ–∫–∏ (–ø—Ä–æ–ø—É—Å–∫–∞—è –∑–∞–≥–æ–ª–æ–≤–æ–∫)
                worksheet[f'E{row}'].number_format = '#,##0.00'
                
            # –ê–≤—Ç–æ—à–∏—Ä–∏–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫
            for column in worksheet.columns:
                max_length = 0
                column_letter = column[0].column_letter
                for cell in column:
                    try:
                        if len(str(cell.value)) > max_length:
                            max_length = len(str(cell.value))
                    except:
                        pass
                adjusted_width = min(max_length + 2, 50)
                worksheet.column_dimensions[column_letter].width = adjusted_width
        
        print(f"\nüìÑ –û–¢–ß–ï–¢ –°–û–•–†–ê–ù–ï–ù:")
        print(f"  Excel: {excel_file.absolute()}")
        
        return df
        
    def print_sales_report_summary(self, df):
        """–í—ã–≤–æ–¥–∏—Ç –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É –æ—Ç—á–µ—Ç–∞ —Å –ø—Ä–æ–¥–∞–∂–∞–º–∏"""
        print(f"\nüìà –°–í–û–î–ö–ê –û–¢–ß–ï–¢–ê –ü–û –ü–†–û–î–ê–ñ–ê–ú:")
        print("-" * 50)
        
        total_shops = len(df)
        total_receipts = int(df['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ_—á–µ–∫–æ–≤'].sum())
        total_revenue = float(df['–û–±–æ—Ä–æ—Ç'].sum())
        total_quantity = float(df['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ_—Ç–æ–≤–∞—Ä–æ–≤'].sum())
        
        print(f"üìä –í—Å–µ–≥–æ –º–∞–≥–∞–∑–∏–Ω–æ–≤: {total_shops}")
        print(f"üßæ –í—Å–µ–≥–æ —á–µ–∫–æ–≤: {total_receipts:,}")
        print(f"üí∞ –û–±—â–∏–π –æ–±–æ—Ä–æ—Ç: {total_revenue:,.2f}")
        print(f"üì¶ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤: {total_quantity:,.1f}")
        
        if total_receipts > 0:
            avg_receipt = total_revenue / total_receipts
            print(f"üßæ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {avg_receipt:.2f}")
        
        if total_shops > 0:
            avg_revenue_per_shop = total_revenue / total_shops
            print(f"üè™ –°—Ä–µ–¥–Ω–∏–π –æ–±–æ—Ä–æ—Ç –Ω–∞ –º–∞–≥–∞–∑–∏–Ω: {avg_revenue_per_shop:,.2f}")
        
        print(f"\nüèÜ –¢–û–ü-5 –ú–ê–ì–ê–ó–ò–ù–û–í –ü–û –û–ë–û–†–û–¢–£:")
        top5_revenue = df.nlargest(5, '–û–±–æ—Ä–æ—Ç')
        for i, (_, row) in enumerate(top5_revenue.iterrows(), 1):
            revenue = float(row['–û–±–æ—Ä–æ—Ç'])
            print(f"  {i}. {row['–ù–∞–∑–≤–∞–Ω–∏–µ_–º–∞–≥–∞–∑–∏–Ω–∞']} ({row['–ì–æ—Ä–æ–¥']}) - {revenue:,.2f}")
            
        print(f"\nüèÜ –¢–û–ü-5 –ú–ê–ì–ê–ó–ò–ù–û–í –ü–û –ö–û–õ–ò–ß–ï–°–¢–í–£ –ß–ï–ö–û–í:")
        top5_receipts = df.nlargest(5, '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ_—á–µ–∫–æ–≤')
        for i, (_, row) in enumerate(top5_receipts.iterrows(), 1):
            receipts = int(row['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ_—á–µ–∫–æ–≤'])
            print(f"  {i}. {row['–ù–∞–∑–≤–∞–Ω–∏–µ_–º–∞–≥–∞–∑–∏–Ω–∞']} ({row['–ì–æ—Ä–æ–¥']}) - {receipts} —á–µ–∫–æ–≤")
            
        print(f"\nüèôÔ∏è  –ü–û –ì–û–†–û–î–ê–ú:")
        city_summary = df.groupby('–ì–æ—Ä–æ–¥').agg({
            '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ_—á–µ–∫–æ–≤': ['count', 'sum'],
            '–û–±–æ—Ä–æ—Ç': 'sum',
            '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ_—Ç–æ–≤–∞—Ä–æ–≤': 'sum'
        }).round(2)
        
        for city in city_summary.index:
            shops_count = int(city_summary.loc[city, ('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ_—á–µ–∫–æ–≤', 'count')])
            receipts_count = int(city_summary.loc[city, ('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ_—á–µ–∫–æ–≤', 'sum')])
            revenue = float(city_summary.loc[city, ('–û–±–æ—Ä–æ—Ç', 'sum')])
            quantity = float(city_summary.loc[city, ('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ_—Ç–æ–≤–∞—Ä–æ–≤', 'sum')])
            print(f"  {city}: {shops_count} –º–∞–≥–∞–∑–∏–Ω–æ–≤, {receipts_count} —á–µ–∫–æ–≤, –æ–±–æ—Ä–æ—Ç: {revenue:,.2f}, —Ç–æ–≤–∞—Ä–æ–≤: {quantity:,.1f}")
            
    def run_sales_report_generation(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç—á–µ—Ç–∞ —Å –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º–∏ –ø—Ä–æ–¥–∞–∂"""
        print("=" * 70)
        print("üöÄ –ì–ï–ù–ï–†–ê–¶–ò–Ø –†–ê–°–®–ò–†–ï–ù–ù–û–ì–û –û–¢–ß–ï–¢–ê –ü–û –ü–†–û–î–ê–ñ–ê–ú")
        print("=" * 70)
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ç—á–µ—Ç–∞
        start_date = "2025-06-01"
        end_date = "2025-06-01"
        
        print(f"üìÖ –ü–µ—Ä–∏–æ–¥: {start_date} - {end_date}")
        print(f"üèôÔ∏è  –ì–æ—Ä–æ–¥–∞: {', '.join(self.cities.values())}")
        print(f"üìä –ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–∫–æ–≤, –û–±–æ—Ä–æ—Ç, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤")
        
        # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–± –æ—á–∏—Å—Ç–∫–µ –∫–µ—à–∞
        if not self.ask_clear_cache():
            return False
            
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ FTP
        ftp = self.connect_ftp()
        if not ftp:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ FTP-—Å–µ—Ä–≤–µ—Ä—É")
            return False
            
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏ –º–∞–≥–∞–∑–∏–Ω–æ–≤
            shops_data = self.download_shop_files(ftp)
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª—ã —á–µ–∫–æ–≤
            receipts_data = self.download_receipt_files(ftp, start_date, end_date)
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª—ã —Ç–æ–≤–∞—Ä–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
            cartitems_data = self.download_cartitem_files(ftp, start_date, end_date)
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            ftp.quit()
            print("\n‚úì –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å FTP –∑–∞–∫—Ä—ã—Ç–æ")
            
            # –ö–æ–Ω—Å–æ–ª–∏–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º–∏ –ø—Ä–æ–¥–∞–∂
            report_data = self.consolidate_data_with_sales(shops_data, receipts_data, cartitems_data)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
            df = self.save_excel_report(report_data, start_date, end_date)
            
            # –í—ã–≤–æ–¥–∏–º —Å–≤–æ–¥–∫—É
            self.print_sales_report_summary(df)
            
            print(f"\n‚úÖ –û–¢–ß–ï–¢ –£–°–ü–ï–®–ù–û –°–ì–ï–ù–ï–†–ò–†–û–í–ê–ù!")
            print(f"üìÅ –ü–∞–ø–∫–∞ –æ—Ç—á–µ—Ç–æ–≤: {self.reports_dir.absolute()}")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")
            try:
                ftp.quit()
            except:
                pass
            return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
    print("FTP Analyzer v3.0 - –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –ø—Ä–æ–¥–∞–∂")
    print("–ê–≤—Ç–æ—Ä: –°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö\n")
    
    try:
        analyzer = FTPAnalyzer()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
        try:
            import pandas as pd
            import openpyxl
        except ImportError as e:
            print("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏!")
            print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏—Ö –∫–æ–º–∞–Ω–¥–∞–º–∏:")
            print("pip install pandas openpyxl")
            return
        
        # –°—Ä–∞–∑—É –∑–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç—á–µ—Ç–∞
        analyzer.run_sales_report_generation()
                
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è  –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()