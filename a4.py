#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
FTP Analyzer - –≠—Ç–∞–ø 4: –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –¥–≤—É—Ö –ø–µ—Ä–∏–æ–¥–æ–≤
–ê–≤—Ç–æ—Ä: –°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö
–í–µ—Ä—Å–∏—è: 4.0
"""

import ftplib
import os
import json
import sys
import csv
import io
from datetime import datetime, timedelta
from pathlib import Path
import pandas as pd

class FTPAnalyzer:
    def __init__(self):
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ FTP-—Å–µ—Ä–≤–µ—Ä–∞
        self.ftp_host = "smkft.space"
        self.ftp_port = 2122
        self.ftp_user = "nielsen"
        self.ftp_pass = "Qazwsx32123"
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–æ—Ä–æ–¥–æ–≤
        self.cities = {
            'khar': '–•–∞—Ä—å–∫–æ–≤',
            'kiev': '–ö–∏–µ–≤', 
            'dnepr': '–î–Ω–µ–ø—Ä',
            'bel': '–ë–µ–ª–∞—è –¶–µ—Ä–∫–æ–≤—å'
        }
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –ø–∞–ø–æ–∫
        self.base_dir = Path("ftp_data")
        self.cache_dir = self.base_dir / "cache"
        self.reports_dir = self.base_dir / "reports"
        self.structure_file = self.base_dir / "ftp_structure.json"
        
        # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–ø–∫–∏
        self.create_directories()
        
    def create_directories(self):
        """–°–æ–∑–¥–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–ø–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
        try:
            self.base_dir.mkdir(exist_ok=True)
            self.cache_dir.mkdir(exist_ok=True)
            self.reports_dir.mkdir(exist_ok=True)
            print(f"‚úì –°–æ–∑–¥–∞–Ω–∞ —Ä–∞–±–æ—á–∞—è –ø–∞–ø–∫–∞: {self.base_dir.absolute()}")
            print(f"‚úì –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ –∫–µ—à–∞: {self.cache_dir.absolute()}")
            print(f"‚úì –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ –æ—Ç—á–µ—Ç–æ–≤: {self.reports_dir.absolute()}")
        except Exception as e:
            print(f"‚úó –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–æ–∫: {e}")
            sys.exit(1)
            
    def clear_cache(self):
        """–û—á–∏—â–∞–µ—Ç –∫–µ—à"""
        try:
            import shutil
            if self.cache_dir.exists():
                shutil.rmtree(self.cache_dir)
                self.cache_dir.mkdir()
                print("‚úì –ö–µ—à –æ—á–∏—â–µ–Ω")
                return True
        except Exception as e:
            print(f"‚úó –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–µ—à–∞: {e}")
            return False
            
    def ask_clear_cache(self):
        """–°–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ—á–∏—Å—Ç–∫–µ –∫–µ—à–∞"""
        while True:
            choice = input("\nüóëÔ∏è  –û—á–∏—Å—Ç–∏—Ç—å –∫–µ—à –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π? (y/n): ").lower().strip()
            if choice in ['y', 'yes', '–¥', '–¥–∞']:
                return self.clear_cache()
            elif choice in ['n', 'no', '–Ω', '–Ω–µ—Ç']:
                print("‚ÑπÔ∏è  –ö–µ—à —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
                return True
            else:
                print("‚ùå –í–≤–µ–¥–∏—Ç–µ 'y' –¥–ª—è –¥–∞ –∏–ª–∏ 'n' –¥–ª—è –Ω–µ—Ç")
                
    def connect_ftp(self):
        """–ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ FTP-—Å–µ—Ä–≤–µ—Ä—É"""
        try:
            print(f"üîÑ –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ FTP-—Å–µ—Ä–≤–µ—Ä—É {self.ftp_host}:{self.ftp_port}...")
            ftp = ftplib.FTP()
            ftp.connect(self.ftp_host, self.ftp_port)
            ftp.login(self.ftp_user, self.ftp_pass)
            print("‚úì –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ FTP —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            return ftp
        except ftplib.error_perm as e:
            print(f"‚úó –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ FTP: {e}")
            return None
        except Exception as e:
            print(f"‚úó –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ FTP: {e}")
            return None
            
    def download_file(self, ftp, remote_path, local_path):
        """–°–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–∞–π–ª —Å FTP —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–∞–π–ª –≤ –∫–µ—à–µ
            if local_path.exists():
                print(f"üìÑ –§–∞–π–ª –Ω–∞–π–¥–µ–Ω –≤ –∫–µ—à–µ: {local_path.name}")
                return True
                
            print(f"‚¨áÔ∏è  –°–∫–∞—á–∏–≤–∞–µ–º: {remote_path}")
            local_path.parent.mkdir(parents=True, exist_ok=True)
            
            with open(local_path, 'wb') as f:
                ftp.retrbinary(f'RETR {remote_path}', f.write)
            
            print(f"‚úì –°–∫–∞—á–∞–Ω: {local_path.name}")
            return True
            
        except ftplib.error_perm as e:
            if "550" in str(e):  # –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
                print(f"‚ö†Ô∏è  –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {remote_path}")
            else:
                print(f"‚úó –û—à–∏–±–∫–∞ FTP –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ {remote_path}: {e}")
            return False
        except Exception as e:
            print(f"‚úó –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è {remote_path}: {e}")
            return False
            
    def read_csv_with_pipe(self, file_path):
        """–ß–∏—Ç–∞–µ—Ç CSV —Ñ–∞–π–ª —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º |"""
        try:
            df = pd.read_csv(file_path, sep='|', encoding='utf-8')
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —á–∏—Å–ª–æ–≤—ã–µ –ø–æ–ª—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ç–∏–ø—ã
            file_name = file_path.name.lower()
            
            if 'cartitem' in file_name:
                # –î–ª—è —Ñ–∞–π–ª–æ–≤ cartitem –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º qty –∏ total_price –≤ —á–∏—Å–ª–∞
                if 'qty' in df.columns:
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–∏—Å–ª–∞ —Å –∑–∞–ø—è—Ç–æ–π –∫–∞–∫ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º –¥–µ—Å—è—Ç–∏—á–Ω—ã—Ö
                    df['qty'] = df['qty'].astype(str).str.replace(',', '.', regex=False)
                    df['qty'] = pd.to_numeric(df['qty'], errors='coerce').fillna(0)
                if 'total_price' in df.columns:
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–∏—Å–ª–∞ —Å –∑–∞–ø—è—Ç–æ–π –∫–∞–∫ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º –¥–µ—Å—è—Ç–∏—á–Ω—ã—Ö
                    df['total_price'] = df['total_price'].astype(str).str.replace(',', '.', regex=False)
                    df['total_price'] = pd.to_numeric(df['total_price'], errors='coerce').fillna(0.0)
            
            # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –∏–∑ —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö –ø–æ–ª–µ–π
            for col in df.columns:
                if df[col].dtype == 'object':
                    df[col] = df[col].astype(str).str.strip()
            
            print(f"‚úì –ü—Ä–æ—á–∏—Ç–∞–Ω CSV: {file_path.name} ({len(df)} —Å—Ç—Ä–æ–∫)")
            return df
        except Exception as e:
            print(f"‚úó –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è CSV {file_path}: {e}")
            return None
            
    def generate_date_range(self, start_date, end_date):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–∞—Ç –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ"""
        dates = []
        current_date = datetime.strptime(start_date, '%Y-%m-%d')
        end_date_obj = datetime.strptime(end_date, '%Y-%m-%d')
        
        while current_date <= end_date_obj:
            dates.append(current_date.strftime('%Y-%m-%d'))
            current_date += timedelta(days=1)
            
        return dates
        
    def download_shop_files(self, ftp):
        """–°–∫–∞—á–∏–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏ –º–∞–≥–∞–∑–∏–Ω–æ–≤"""
        print("\nüìã –ó–ê–ì–†–£–ó–ö–ê –°–ü–†–ê–í–û–ß–ù–ò–ö–û–í –ú–ê–ì–ê–ó–ò–ù–û–í")
        print("-" * 40)
        
        shops_data = {}
        
        for city_code, city_name in self.cities.items():
            remote_path = f"/www/shop_{city_code}.csv"
            local_path = self.cache_dir / f"shop_{city_code}.csv"
            
            if self.download_file(ftp, remote_path, local_path):
                df = self.read_csv_with_pipe(local_path)
                if df is not None:
                    shops_data[city_code] = df
                    print(f"  üìä {city_name}: {len(df)} –º–∞–≥–∞–∑–∏–Ω–æ–≤")
                    
        return shops_data
        
    def download_period_data(self, ftp, start_date, end_date, period_name):
        """–°–∫–∞—á–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥"""
        print(f"\nüìÖ –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–• –ó–ê {period_name.upper()} ({start_date} - {end_date})")
        print("-" * 70)
        
        dates = self.generate_date_range(start_date, end_date)
        receipts_data = {}
        cartitems_data = {}
        
        for city_code, city_name in self.cities.items():
            print(f"\nüèôÔ∏è  {city_name} ({city_code}):")
            receipts_data[city_code] = []
            cartitems_data[city_code] = []
            
            for date in dates:
                # –°–∫–∞—á–∏–≤–∞–µ–º —á–µ–∫–∏
                receipt_remote = f"/www/receipt/receipt_{city_code}_{date}.csv"
                receipt_local = self.cache_dir / f"receipt_{city_code}_{date}.csv"
                
                # –°–∫–∞—á–∏–≤–∞–µ–º —Ç–æ–≤–∞—Ä–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
                cartitem_remote = f"/www/cartitem/cartitem_{city_code}_{date}.csv"
                cartitem_local = self.cache_dir / f"cartitem_{city_code}_{date}.csv"
                
                receipt_loaded = False
                cartitem_loaded = False
                
                # –ó–∞–≥—Ä—É–∂–∞–µ–º —á–µ–∫–∏
                if self.download_file(ftp, receipt_remote, receipt_local):
                    df = self.read_csv_with_pipe(receipt_local)
                    if df is not None:
                        df['date'] = date
                        receipts_data[city_code].append(df)
                        receipt_loaded = True
                        
                # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–≤–∞—Ä–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
                if self.download_file(ftp, cartitem_remote, cartitem_local):
                    df = self.read_csv_with_pipe(cartitem_local)
                    if df is not None:
                        df['date'] = date
                        cartitems_data[city_code].append(df)
                        cartitem_loaded = True
                        
                if receipt_loaded and cartitem_loaded:
                    receipt_df = receipts_data[city_code][-1]
                    cartitem_df = cartitems_data[city_code][-1]
                    total_qty = float(cartitem_df['qty'].sum()) if 'qty' in cartitem_df.columns else 0.0
                    total_price = float(cartitem_df['total_price'].sum()) if 'total_price' in cartitem_df.columns else 0.0
                    print(f"    üìÖ {date}: {len(receipt_df)} —á–µ–∫–æ–≤, {len(cartitem_df)} –ø–æ–∑–∏—Ü–∏–π, —Ç–æ–≤–∞—Ä–æ–≤: {total_qty:.1f}, –æ–±–æ—Ä–æ—Ç: {total_price:.2f}")
                    
        return receipts_data, cartitems_data
        
    def calculate_period_metrics(self, shops_data, receipts_data, cartitems_data, period_name):
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞"""
        print(f"\nüìä –†–ê–°–ß–ï–¢ –ú–ï–¢–†–ò–ö –î–õ–Ø {period_name.upper()}")
        print("-" * 50)
        
        period_metrics = {}
        
        for city_code, city_name in self.cities.items():
            print(f"\nüèôÔ∏è  –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {city_name}...")
            
            if city_code not in shops_data:
                print(f"  ‚ö†Ô∏è  –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –º–∞–≥–∞–∑–∏–Ω–∞—Ö –¥–ª—è {city_name}")
                continue
                
            shops_df = shops_data[city_code]
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ—Ç—Ä–∏–∫–∏ –Ω—É–ª—è–º–∏
            city_metrics = {}
            for _, shop in shops_df.iterrows():
                city_metrics[shop['id']] = {
                    'shop_name': shop['name'],
                    'receipts': 0,
                    'revenue': 0.0,
                    'quantity': 0.0
                }
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ–∫–∏
            if city_code in receipts_data and receipts_data[city_code]:
                all_receipts = pd.concat(receipts_data[city_code], ignore_index=True)
                receipt_counts = all_receipts.groupby('shop_id').size().reset_index(name='receipt_count')
                
                for _, row in receipt_counts.iterrows():
                    shop_id = row['shop_id']
                    if shop_id in city_metrics:
                        city_metrics[shop_id]['receipts'] = int(row['receipt_count'])
                        
                print(f"  ‚úì –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —á–µ–∫–æ–≤: {len(all_receipts)}")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
            if city_code in cartitems_data and cartitems_data[city_code]:
                all_cartitems = pd.concat(cartitems_data[city_code], ignore_index=True)
                
                if city_code in receipts_data and receipts_data[city_code]:
                    all_receipts = pd.concat(receipts_data[city_code], ignore_index=True)
                    
                    # –°–≤—è–∑—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ —Å —á–µ–∫–∞–º–∏
                    cartitems_with_shops = all_cartitems.merge(
                        all_receipts[['id', 'shop_id']], 
                        left_on='receipt_id', 
                        right_on='id', 
                        how='inner'
                    )
                    
                    if not cartitems_with_shops.empty:
                        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –º–∞–≥–∞–∑–∏–Ω–∞–º
                        sales_summary = cartitems_with_shops.groupby('shop_id').agg({
                            'total_price': 'sum',
                            'qty': 'sum'
                        }).reset_index()
                        
                        for _, row in sales_summary.iterrows():
                            shop_id = row['shop_id']
                            if shop_id in city_metrics:
                                city_metrics[shop_id]['revenue'] = float(row['total_price'])
                                city_metrics[shop_id]['quantity'] = float(row['qty'])
                                
                        print(f"  ‚úì –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ç–æ–≤–∞—Ä–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π: {len(all_cartitems)}")
                        print(f"  ‚úì –°–≤—è–∑–∞–Ω–æ —Å —á–µ–∫–∞–º–∏: {len(cartitems_with_shops)}")
            
            period_metrics[city_code] = city_metrics
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≥–æ—Ä–æ–¥—É
            total_receipts = sum([m['receipts'] for m in city_metrics.values()])
            total_revenue = sum([m['revenue'] for m in city_metrics.values()])
            total_quantity = sum([m['quantity'] for m in city_metrics.values()])
            
            print(f"  üìä –ò—Ç–æ–≥–æ –ø–æ –≥–æ—Ä–æ–¥—É: {total_receipts} —á–µ–∫–æ–≤, –æ–±–æ—Ä–æ—Ç: {total_revenue:.2f}, —Ç–æ–≤–∞—Ä–æ–≤: {total_quantity:.1f}")
            
        return period_metrics
        
    def create_comparison_report(self, shops_data, period1_metrics, period2_metrics, period1_name, period2_name):
        """–°–æ–∑–¥–∞–µ—Ç —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç"""
        print(f"\nüìà –°–û–ó–î–ê–ù–ò–ï –°–†–ê–í–ù–ò–¢–ï–õ–¨–ù–û–ì–û –û–¢–ß–ï–¢–ê")
        print("-" * 50)
        
        report_data = []
        
        for city_code, city_name in self.cities.items():
            if city_code not in shops_data:
                continue
                
            shops_df = shops_data[city_code]
            
            for _, shop in shops_df.iterrows():
                shop_id = shop['id']
                shop_name = shop['name']
                
                # –ú–µ—Ç—Ä–∏–∫–∏ –ø–µ—Ä–≤–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
                p1_metrics = period1_metrics.get(city_code, {}).get(shop_id, {
                    'receipts': 0, 'revenue': 0.0, 'quantity': 0.0
                })
                
                # –ú–µ—Ç—Ä–∏–∫–∏ –≤—Ç–æ—Ä–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
                p2_metrics = period2_metrics.get(city_code, {}).get(shop_id, {
                    'receipts': 0, 'revenue': 0.0, 'quantity': 0.0
                })
                
                # –ê–±—Å–æ–ª—é—Ç–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
                change_receipts = p2_metrics['receipts'] - p1_metrics['receipts']
                change_revenue = p2_metrics['revenue'] - p1_metrics['revenue']
                change_quantity = p2_metrics['quantity'] - p1_metrics['quantity']
                
                # –ü—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
                change_receipts_pct = (change_receipts / p1_metrics['receipts'] * 100) if p1_metrics['receipts'] > 0 else 0
                change_revenue_pct = (change_revenue / p1_metrics['revenue'] * 100) if p1_metrics['revenue'] > 0 else 0
                change_quantity_pct = (change_quantity / p1_metrics['quantity'] * 100) if p1_metrics['quantity'] > 0 else 0
                
                report_data.append({
                    '–ì–æ—Ä–æ–¥': city_name,
                    'ID_–º–∞–≥–∞–∑–∏–Ω–∞': shop_id,
                    '–ù–∞–∑–≤–∞–Ω–∏–µ_–º–∞–≥–∞–∑–∏–Ω–∞': shop_name,
                    f'{period1_name}_–ß–µ–∫–∏': p1_metrics['receipts'],
                    f'{period1_name}_–û–±–æ—Ä–æ—Ç': p1_metrics['revenue'],
                    f'{period1_name}_–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ': p1_metrics['quantity'],
                    f'{period2_name}_–ß–µ–∫–∏': p2_metrics['receipts'],
                    f'{period2_name}_–û–±–æ—Ä–æ—Ç': p2_metrics['revenue'],
                    f'{period2_name}_–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ': p2_metrics['quantity'],
                    '–ò–∑–º_–ß–µ–∫–∏_–∞–±—Å': change_receipts,
                    '–ò–∑–º_–û–±–æ—Ä–æ—Ç_–∞–±—Å': change_revenue,
                    '–ò–∑–º_–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ_–∞–±—Å': change_quantity,
                    '–ò–∑–º_–ß–µ–∫–∏_%': change_receipts_pct,
                    '–ò–∑–º_–û–±–æ—Ä–æ—Ç_%': change_revenue_pct,
                    '–ò–∑–º_–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ_%': change_quantity_pct
                })
                
        return report_data
        
    def save_comparison_excel_report(self, report_data, period1_dates, period2_dates, period1_name, period2_name):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –≤ Excel"""
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        
        # –°–æ–∑–¥–∞–µ–º DataFrame
        df = pd.DataFrame(report_data)
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≥–æ—Ä–æ–¥—É –∏ –∏–∑–º–µ–Ω–µ–Ω–∏—é –æ–±–æ—Ä–æ—Ç–∞
        df = df.sort_values(['–ì–æ—Ä–æ–¥', '–ò–∑–º_–û–±–æ—Ä–æ—Ç_–∞–±—Å'], ascending=[True, False])
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —á–∏—Å–ª–æ–≤—ã–µ –ø–æ–ª—è
        numeric_cols = [col for col in df.columns if '–û–±–æ—Ä–æ—Ç' in col or '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ' in col]
        for col in numeric_cols:
            if '%' not in col:
                df[col] = pd.to_numeric(df[col], errors='coerce').fillna(0.0).round(2)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        pct_cols = [col for col in df.columns if '%' in col]
        for col in pct_cols:
            df[col] = pd.to_numeric(df[col], errors='coerce').fillna(0.0).round(1)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Excel
        excel_file = self.reports_dir / f"comparison_report_{period1_dates}_{period2_dates}_{timestamp}.xlsx"
        
        with pd.ExcelWriter(excel_file, engine='openpyxl') as writer:
            df.to_excel(writer, sheet_name='–°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç', index=False)
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç —Ä–∞–±–æ—á–µ–≥–æ –ª–∏—Å—Ç–∞ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            worksheet = writer.sheets['–°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç']
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —á–∏—Å–ª–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏
            from openpyxl.styles import PatternFill
            
            # –í—ã–¥–µ–ª—è–µ–º –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–µ–ª–µ–Ω—ã–º, –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∫—Ä–∞—Å–Ω—ã–º
            green_fill = PatternFill(start_color='C6EFCE', end_color='C6EFCE', fill_type='solid')
            red_fill = PatternFill(start_color='FFC7CE', end_color='FFC7CE', fill_type='solid')
            
            # –ê–≤—Ç–æ—à–∏—Ä–∏–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫
            for column in worksheet.columns:
                max_length = 0
                column_letter = column[0].column_letter
                for cell in column:
                    try:
                        if len(str(cell.value)) > max_length:
                            max_length = len(str(cell.value))
                    except:
                        pass
                adjusted_width = min(max_length + 2, 30)
                worksheet.column_dimensions[column_letter].width = adjusted_width
        
        print(f"\nüìÑ –°–†–ê–í–ù–ò–¢–ï–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –°–û–•–†–ê–ù–ï–ù:")
        print(f"  Excel: {excel_file.absolute()}")
        
        return df
        
    def print_comparison_summary(self, df, period1_name, period2_name):
        """–í—ã–≤–æ–¥–∏—Ç –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        print(f"\nüìà –°–í–û–î–ö–ê –°–†–ê–í–ù–ò–¢–ï–õ–¨–ù–û–ì–û –û–¢–ß–ï–¢–ê:")
        print("-" * 60)
        
        # –û–±—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏
        p1_receipts = df[f'{period1_name}_–ß–µ–∫–∏'].sum()
        p1_revenue = df[f'{period1_name}_–û–±–æ—Ä–æ—Ç'].sum()
        p1_quantity = df[f'{period1_name}_–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'].sum()
        
        p2_receipts = df[f'{period2_name}_–ß–µ–∫–∏'].sum()
        p2_revenue = df[f'{period2_name}_–û–±–æ—Ä–æ—Ç'].sum()
        p2_quantity = df[f'{period2_name}_–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'].sum()
        
        print(f"üìä {period1_name.upper()}:")
        print(f"  üßæ –ß–µ–∫–æ–≤: {int(p1_receipts):,}")
        print(f"  üí∞ –û–±–æ—Ä–æ—Ç: {float(p1_revenue):,.2f}")
        print(f"  üì¶ –¢–æ–≤–∞—Ä–æ–≤: {float(p1_quantity):,.1f}")
        
        print(f"\nüìä {period2_name.upper()}:")
        print(f"  üßæ –ß–µ–∫–æ–≤: {int(p2_receipts):,}")
        print(f"  üí∞ –û–±–æ—Ä–æ—Ç: {float(p2_revenue):,.2f}")
        print(f"  üì¶ –¢–æ–≤–∞—Ä–æ–≤: {float(p2_quantity):,.1f}")
        
        # –ò–∑–º–µ–Ω–µ–Ω–∏—è
        change_receipts = p2_receipts - p1_receipts
        change_revenue = p2_revenue - p1_revenue
        change_quantity = p2_quantity - p1_quantity
        
        change_receipts_pct = (change_receipts / p1_receipts * 100) if p1_receipts > 0 else 0
        change_revenue_pct = (change_revenue / p1_revenue * 100) if p1_revenue > 0 else 0
        change_quantity_pct = (change_quantity / p1_quantity * 100) if p1_quantity > 0 else 0
        
        print(f"\nüìà –ò–ó–ú–ï–ù–ï–ù–ò–Ø:")
        print(f"  üßæ –ß–µ–∫–∏: {int(change_receipts):+,} ({change_receipts_pct:+.1f}%)")
        print(f"  üí∞ –û–±–æ—Ä–æ—Ç: {float(change_revenue):+,.2f} ({change_revenue_pct:+.1f}%)")
        print(f"  üì¶ –¢–æ–≤–∞—Ä—ã: {float(change_quantity):+,.1f} ({change_quantity_pct:+.1f}%)")
        
        # –¢–û–ü —Ä–∞—Å—Ç—É—â–∏—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤
        print(f"\nüöÄ –¢–û–ü-5 –†–ê–°–¢–£–©–ò–• –ú–ê–ì–ê–ó–ò–ù–û–í –ü–û –û–ë–û–†–û–¢–£:")
        top_growth = df.nlargest(5, '–ò–∑–º_–û–±–æ—Ä–æ—Ç_–∞–±—Å')
        for i, (_, row) in enumerate(top_growth.iterrows(), 1):
            if row['–ò–∑–º_–û–±–æ—Ä–æ—Ç_–∞–±—Å'] > 0:
                print(f"  {i}. {row['–ù–∞–∑–≤–∞–Ω–∏–µ_–º–∞–≥–∞–∑–∏–Ω–∞']} ({row['–ì–æ—Ä–æ–¥']}) +{float(row['–ò–∑–º_–û–±–æ—Ä–æ—Ç_–∞–±—Å']):,.2f} ({float(row['–ò–∑–º_–û–±–æ—Ä–æ—Ç_%']):+.1f}%)")
        
        # –¢–û–ü –ø–∞–¥–∞—é—â–∏—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤
        print(f"\nüìâ –¢–û–ü-5 –ü–ê–î–ê–Æ–©–ò–• –ú–ê–ì–ê–ó–ò–ù–û–í –ü–û –û–ë–û–†–û–¢–£:")
        top_decline = df.nsmallest(5, '–ò–∑–º_–û–±–æ—Ä–æ—Ç_–∞–±—Å')
        for i, (_, row) in enumerate(top_decline.iterrows(), 1):
            if row['–ò–∑–º_–û–±–æ—Ä–æ—Ç_–∞–±—Å'] < 0:
                print(f"  {i}. {row['–ù–∞–∑–≤–∞–Ω–∏–µ_–º–∞–≥–∞–∑–∏–Ω–∞']} ({row['–ì–æ—Ä–æ–¥']}) {float(row['–ò–∑–º_–û–±–æ—Ä–æ—Ç_–∞–±—Å']):,.2f} ({float(row['–ò–∑–º_–û–±–æ—Ä–æ—Ç_%']):+.1f}%)")
        
        # –ü–æ –≥–æ—Ä–æ–¥–∞–º
        print(f"\nüèôÔ∏è  –ò–ó–ú–ï–ù–ï–ù–ò–Ø –ü–û –ì–û–†–û–î–ê–ú:")
        city_summary = df.groupby('–ì–æ—Ä–æ–¥').agg({
            f'{period1_name}_–û–±–æ—Ä–æ—Ç': 'sum',
            f'{period2_name}_–û–±–æ—Ä–æ—Ç': 'sum',
            '–ò–∑–º_–û–±–æ—Ä–æ—Ç_–∞–±—Å': 'sum'
        }).round(2)
        
        for city in city_summary.index:
            p1_rev = float(city_summary.loc[city, f'{period1_name}_–û–±–æ—Ä–æ—Ç'])
            p2_rev = float(city_summary.loc[city, f'{period2_name}_–û–±–æ—Ä–æ—Ç'])
            change = float(city_summary.loc[city, '–ò–∑–º_–û–±–æ—Ä–æ—Ç_–∞–±—Å'])
            change_pct = (change / p1_rev * 100) if p1_rev > 0 else 0
            print(f"  {city}: {p1_rev:,.2f} ‚Üí {p2_rev:,.2f} ({change:+,.2f}, {change_pct:+.1f}%)")
            
    def run_comparison_report_generation(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        print("=" * 80)
        print("üöÄ –ì–ï–ù–ï–†–ê–¶–ò–Ø –°–†–ê–í–ù–ò–¢–ï–õ–¨–ù–û–ì–û –û–¢–ß–ï–¢–ê –î–í–£–• –ü–ï–†–ò–û–î–û–í")
        print("=" * 80)
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–µ—Ä–∏–æ–¥–æ–≤
        period1_start = "2025-06-02"
        period1_end = "2025-06-08"
        period1_name = "–ü–µ—Ä–∏–æ–¥1"
        
        period2_start = "2025-06-09"
        period2_end = "2025-06-15"
        period2_name = "–ü–µ—Ä–∏–æ–¥2"
        
        print(f"üìÖ {period1_name}: {period1_start} - {period1_end}")
        print(f"üìÖ {period2_name}: {period2_start} - {period2_end}")
        print(f"üèôÔ∏è  –ì–æ—Ä–æ–¥–∞: {', '.join(self.cities.values())}")
        print(f"üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–∫–æ–≤, –û–±–æ—Ä–æ—Ç, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤")
        
        # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–± –æ—á–∏—Å—Ç–∫–µ –∫–µ—à–∞
        if not self.ask_clear_cache():
            return False
            
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ FTP
        ftp = self.connect_ftp()
        if not ftp:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ FTP-—Å–µ—Ä–≤–µ—Ä—É")
            return False
            
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏ –º–∞–≥–∞–∑–∏–Ω–æ–≤
            shops_data = self.download_shop_files(ftp)
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–≤–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
            period1_receipts, period1_cartitems = self.download_period_data(
                ftp, period1_start, period1_end, period1_name
            )
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤—Ç–æ—Ä–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
            period2_receipts, period2_cartitems = self.download_period_data(
                ftp, period2_start, period2_end, period2_name
            )
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            ftp.quit()
            print("\n‚úì –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å FTP –∑–∞–∫—Ä—ã—Ç–æ")
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
            period1_metrics = self.calculate_period_metrics(
                shops_data, period1_receipts, period1_cartitems, period1_name
            )
            
            period2_metrics = self.calculate_period_metrics(
                shops_data, period2_receipts, period2_cartitems, period2_name
            )
            
            # –°–æ–∑–¥–∞–µ–º —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
            report_data = self.create_comparison_report(
                shops_data, period1_metrics, period2_metrics, period1_name, period2_name
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
            df = self.save_comparison_excel_report(
                report_data, 
                f"{period1_start}_{period1_end}",
                f"{period2_start}_{period2_end}",
                period1_name, 
                period2_name
            )
            
            # –í—ã–≤–æ–¥–∏–º —Å–≤–æ–¥–∫—É
            self.print_comparison_summary(df, period1_name, period2_name)
            
            print(f"\n‚úÖ –°–†–ê–í–ù–ò–¢–ï–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –£–°–ü–ï–®–ù–û –°–ì–ï–ù–ï–†–ò–†–û–í–ê–ù!")
            print(f"üìÅ –ü–∞–ø–∫–∞ –æ—Ç—á–µ—Ç–æ–≤: {self.reports_dir.absolute()}")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")
            try:
                ftp.quit()
            except:
                pass
            return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
    print("FTP Analyzer v4.0 - –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –ø—Ä–æ–¥–∞–∂")
    print("–ê–≤—Ç–æ—Ä: –°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö\n")
    
    try:
        analyzer = FTPAnalyzer()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
        try:
            import pandas as pd
            import openpyxl
        except ImportError as e:
            print("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏!")
            print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏—Ö –∫–æ–º–∞–Ω–¥–∞–º–∏:")
            print("pip install pandas openpyxl")
            return
        
        # –°—Ä–∞–∑—É –∑–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
        analyzer.run_comparison_report_generation()
                
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è  –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()