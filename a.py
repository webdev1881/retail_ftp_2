#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
FTP Analyzer - –≠—Ç–∞–ø 1: –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã FTP-—Å–µ—Ä–≤–µ—Ä–∞
–ê–≤—Ç–æ—Ä: –°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö
–í–µ—Ä—Å–∏—è: 1.0
"""

import ftplib
import os
import json
import sys
from datetime import datetime
from pathlib import Path

class FTPAnalyzer:
    def __init__(self):
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ FTP-—Å–µ—Ä–≤–µ—Ä–∞
        self.ftp_host = "smkft.space"
        self.ftp_port = 2122
        self.ftp_user = "nielsen"
        self.ftp_pass = "Qazwsx32123"
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –ø–∞–ø–æ–∫
        self.base_dir = Path("ftp_data")
        self.cache_dir = self.base_dir / "cache"
        self.structure_file = self.base_dir / "ftp_structure.json"
        
        # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–ø–∫–∏
        self.create_directories()
        
    def create_directories(self):
        """–°–æ–∑–¥–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–ø–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
        try:
            self.base_dir.mkdir(exist_ok=True)
            self.cache_dir.mkdir(exist_ok=True)
            print(f"‚úì –°–æ–∑–¥–∞–Ω–∞ —Ä–∞–±–æ—á–∞—è –ø–∞–ø–∫–∞: {self.base_dir.absolute()}")
            print(f"‚úì –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ –∫–µ—à–∞: {self.cache_dir.absolute()}")
        except Exception as e:
            print(f"‚úó –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–æ–∫: {e}")
            sys.exit(1)
            
    def connect_ftp(self):
        """–ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ FTP-—Å–µ—Ä–≤–µ—Ä—É"""
        try:
            print(f"üîÑ –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ FTP-—Å–µ—Ä–≤–µ—Ä—É {self.ftp_host}:{self.ftp_port}...")
            ftp = ftplib.FTP()
            ftp.connect(self.ftp_host, self.ftp_port)
            ftp.login(self.ftp_user, self.ftp_pass)
            print("‚úì –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ FTP —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            return ftp
        except ftplib.error_perm as e:
            print(f"‚úó –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ FTP: {e}")
            return None
        except Exception as e:
            print(f"‚úó –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ FTP: {e}")
            return None
            
    def scan_directory(self, ftp, path="/"):
        """–°–∫–∞–Ω–∏—Ä—É–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –Ω–∞ FTP-—Å–µ—Ä–≤–µ—Ä–µ"""
        items = []
        try:
            print(f"üîç –°–∫–∞–Ω–∏—Ä—É–µ–º –ø–∞–ø–∫—É: {path}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –ø–∞–ø–∫–µ
            ftp_items = []
            ftp.retrlines('LIST ' + path, ftp_items.append)
            
            for item in ftp_items:
                # –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫—É LIST (Unix —Ñ–æ—Ä–º–∞—Ç)
                parts = item.split()
                if len(parts) >= 9:
                    permissions = parts[0]
                    name = ' '.join(parts[8:])  # –ò–º—è –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–±–µ–ª—ã
                    
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ–∫—É—â—É—é –∏ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –ø–∞–ø–∫–∏
                    if name in ['.', '..']:
                        continue
                        
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —ç–ª–µ–º–µ–Ω—Ç–∞
                    is_directory = permissions.startswith('d')
                    
                    item_info = {
                        'name': name,
                        'path': f"{path.rstrip('/')}/{name}",
                        'type': 'directory' if is_directory else 'file',
                        'size': parts[4] if not is_directory else 0,
                        'permissions': permissions,
                        'modified': ' '.join(parts[5:8])
                    }
                    
                    items.append(item_info)
                    
            print(f"  üìÅ –ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {len(items)}")
            return items
            
        except Exception as e:
            print(f"‚úó –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞–ø–∫–∏ {path}: {e}")
            return []
            
    def scan_ftp_structure(self, ftp, start_path="/www", max_depth=3, current_depth=0):
        """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ —Å–∫–∞–Ω–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É FTP –Ω–∞—á–∏–Ω–∞—è —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–∞–ø–∫–∏"""
        structure = {
            'path': start_path,
            'type': 'directory',
            'children': [],
            'scanned_at': datetime.now().isoformat()
        }
        
        if current_depth >= max_depth:
            print(f"‚ö†Ô∏è  –î–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≥–ª—É–±–∏–Ω–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è ({max_depth}) –¥–ª—è {start_path}")
            return structure
            
        items = self.scan_directory(ftp, start_path)
        
        for item in items:
            if item['type'] == 'file' and item['name'].lower().endswith('.csv'):
                # –î–æ–±–∞–≤–ª—è–µ–º CSV —Ñ–∞–π–ª—ã
                structure['children'].append({
                    'name': item['name'],
                    'path': item['path'],
                    'type': 'file',
                    'size': item['size'],
                    'format': 'csv'
                })
                print(f"  üìÑ CSV —Ñ–∞–π–ª: {item['name']} ({item['size']} –±–∞–π—Ç)")
                
            elif item['type'] == 'directory':
                # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ —Å–∫–∞–Ω–∏—Ä—É–µ–º –ø–æ–¥–ø–∞–ø–∫–∏
                print(f"  üìÅ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –ø–∞–ø–∫—É: {item['name']}")
                subdirectory = self.scan_ftp_structure(
                    ftp, 
                    item['path'], 
                    max_depth, 
                    current_depth + 1
                )
                structure['children'].append(subdirectory)
                
        return structure
        
    def save_structure(self, structure):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É FTP –≤ JSON —Ñ–∞–π–ª"""
        try:
            with open(self.structure_file, 'w', encoding='utf-8') as f:
                json.dump(structure, f, ensure_ascii=False, indent=2)
            print(f"‚úì –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Ñ–∞–π–ª: {self.structure_file.absolute()}")
            return True
        except Exception as e:
            print(f"‚úó –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: {e}")
            return False
            
    def load_structure(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É FTP –∏–∑ JSON —Ñ–∞–π–ª–∞"""
        try:
            if self.structure_file.exists():
                with open(self.structure_file, 'r', encoding='utf-8') as f:
                    structure = json.load(f)
                print(f"‚úì –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ —Ñ–∞–π–ª–∞: {self.structure_file.absolute()}")
                return structure
            else:
                print(f"‚ö†Ô∏è  –§–∞–π–ª —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.structure_file.absolute()}")
                return None
        except Exception as e:
            print(f"‚úó –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: {e}")
            return None
            
    def print_structure_summary(self, structure, level=0):
        """–í—ã–≤–æ–¥–∏—Ç –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É —Å—Ç—Ä—É–∫—Ç—É—Ä—ã"""
        indent = "  " * level
        
        if structure['type'] == 'directory':
            print(f"{indent}üìÅ {structure['path']}")
            csv_files = [child for child in structure.get('children', []) if child.get('format') == 'csv']
            directories = [child for child in structure.get('children', []) if child['type'] == 'directory']
            
            if csv_files:
                print(f"{indent}  üìÑ CSV —Ñ–∞–π–ª–æ–≤: {len(csv_files)}")
                
            for child in structure.get('children', []):
                if child['type'] == 'directory':
                    self.print_structure_summary(child, level + 1)
                    
    def run_stage1(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–µ—Ä–≤—ã–π —ç—Ç–∞–ø - —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã FTP"""
        print("=" * 60)
        print("üöÄ –≠–¢–ê–ü 1: –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–ï –°–¢–†–£–ö–¢–£–†–´ FTP-–°–ï–†–í–ï–†–ê")
        print("=" * 60)
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ FTP
        ftp = self.connect_ftp()
        if not ftp:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ FTP-—Å–µ—Ä–≤–µ—Ä—É")
            return False
            
        try:
            # –°–∫–∞–Ω–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            print("\nüîç –ù–∞—á–∏–Ω–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã...")
            structure = self.scan_ftp_structure(ftp, "/www", max_depth=3)
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            ftp.quit()
            print("‚úì –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å FTP –∑–∞–∫—Ä—ã—Ç–æ")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            if self.save_structure(structure):
                print("\nüìã –ö–†–ê–¢–ö–ê–Ø –°–í–û–î–ö–ê –°–¢–†–£–ö–¢–£–†–´:")
                print("-" * 40)
                self.print_structure_summary(structure)
                
                print(f"\n‚úÖ –≠–¢–ê–ü 1 –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!")
                print(f"üìÅ –†–∞–±–æ—á–∞—è –ø–∞–ø–∫–∞: {self.base_dir.absolute()}")
                print(f"üìÑ –§–∞–π–ª —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: {self.structure_file.absolute()}")
                print("\nüí° –î–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É –Ω–∞–ø–∏—à–∏—Ç–µ '–û–ö'")
                return True
            else:
                print("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            try:
                ftp.quit()
            except:
                pass
            return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
    print("FTP Analyzer v1.0 - –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–∞–Ω–Ω—ã—Ö FTP-—Å–µ—Ä–≤–µ—Ä–∞")
    print("–ê–≤—Ç–æ—Ä: –°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö\n")
    
    try:
        analyzer = FTPAnalyzer()
        success = analyzer.run_stage1()
        
        if success:
            input("\n‚è∏Ô∏è  –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...")
        else:
            input("\n‚ùå –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏. –ù–∞–∂–º–∏—Ç–µ Enter...")
            
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è  –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...")

if __name__ == "__main__":
    main()